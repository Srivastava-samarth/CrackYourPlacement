class Solution {
public:

    int counttNeighbour(vector<vector<int>>& curr, int i, int j, int n, int m){
        int count = 0;
        //upper neighbour
        if(i > 0) {
            if(curr[i-1][j] == 1) count++;
        }
        // lower neighbour
        if(i < n-1){
            if(curr[i+1][j] == 1) count++;
        }
        // left neighbour
        if(j > 0){
            if(curr[i][j-1] == 1) count++;
        }
        //right neighbour
        if(j <  m-1){
            if(curr[i][j+1] == 1) count++;
        }
        //diagonally up left
        if(i > 0 && j > 0){
            if(curr[i-1][j-1] == 1) count++;
        }
        //diagonally up right
        if(i > 0 && j < m-1){
            if(curr[i-1][j+1] == 1) count++;
        }
        //diagonally down left
        if(i < n-1 && j > 0){
            if(curr[i+1][j-1] == 1) count++;
        } 
        //diagonally down right
        if(i < n-1 && j < m-1){
            if(curr[i+1][j+1] == 1) count++;
        } 
        return count;
    }

    void gameOfLife(vector<vector<int>>& board) {
        int n = board.size();
        int m = board[0].size();
        vector<vector<int>> curr = board;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if((counttNeighbour(curr,i,j,n,m) < 2 || counttNeighbour(curr,i,j,n,m) > 3) && board[i][j] == 1){
                    board[i][j] = 0;
                }else if(counttNeighbour(curr,i,j,n,m) == 3 && board[i][j] == 0){
                    board[i][j] = 1;
                }else if((counttNeighbour(curr,i,j,n,m) == 3 || counttNeighbour(curr,i,j,n,m) == 2) && board[i][j] == 1){
                    board[i][j] = 1;
                }
            }
        }

    }
};
