class Solution {
public:

    ListNode* mergeList(ListNode* head1,ListNode* head2){
        if(!head1) return head2;
        if(!head2) return head1;

        ListNode* ans = new ListNode(-1);
        ListNode* temp = ans;
        while(head1 && head2){
            if(head1->val < head2->val){
                temp->next = head1;
                temp = temp->next;
                head1 = head1->next;
            }else{
                temp->next = head2;
                temp = temp->next;
                head2 = head2->next;
            }
        }
        while(head1){
            temp->next = head1;
            temp = temp->next;
            head1 = head1->next;
        }
        while(head2){
            temp->next = head2;
            temp = temp->next;
            head2 = head2->next;
        }
        return ans->next;
    }

    ListNode* mergeKLists(vector<ListNode*> & lists) {
        return mergeSortHelper(lists, 0, lists.size() - 1);
    }

    ListNode * mergeSortHelper(vector<ListNode*> & lists, int start, int end) {
        if (start > end) {
            return NULL;
        }
        if (start == end) {
            return lists[start];
        }
        int mid = start + (end - start) / 2;
        ListNode * left = mergeSortHelper(lists, start, mid);
        ListNode * right = mergeSortHelper(lists, mid + 1, end);
        return mergeList(left, right);
    }
};
