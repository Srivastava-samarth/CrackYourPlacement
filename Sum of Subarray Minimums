class Solution {
public:

    vector<int>nextSmaller(vector<int> &arr, int n){
        stack<int>st;
        vector<int>ans(n);
        for(int i=n-1;i>=0;i--){
            int curr = arr[i];
            while(!st.empty() && arr[st.top()] >= curr){
                st.pop();
            }
           ans[i] = st.empty() ? n:st.top();
           st.push(i);
        }
        return ans;
    }

    vector<int>prevSmaller(vector<int> &arr, int n){
        stack<int>st;
        vector<int>ans(n);
        for(int i=0;i<n;i++){
            int curr = arr[i];
            while(!st.empty() && arr[st.top()] > curr){
                st.pop();
            }
           ans[i] = st.empty() ? -1:st.top();
           st.push(i);
        }
        return ans;
    }

    int sumSubarrayMins(vector<int>& arr) {
        int n = arr.size();
        vector<int>next = nextSmaller(arr,n);
        vector<int>prev = prevSmaller(arr,n);
        int total = 0;
        int Mod = 1e9+7;
        for(int i=0;i<arr.size();i++){
            int left = i - prev[i];
            int right = next[i] - i;
            total = (total + (left * right * 1ll * arr[i])%Mod)%Mod;
        }
        return total;
    }
};
